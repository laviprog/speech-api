services:
  speech-postgres:
    image: postgres:16
    container_name: speech-postgres
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - speech-network
    volumes:
      - speech-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 10
    restart: unless-stopped

  speech-redis:
    image: redis:7-alpine
    container_name: speech-redis
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - speech-network
    volumes:
      - speech-redis-data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  migrate:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    image: speech-migrate:latest
    container_name: speech-migrate
    env_file:
      - .env
    command: ["uv", "run", "alembic", "upgrade", "head"]
    networks:
      - speech-network
    depends_on:
      speech-postgres:
        condition: service_healthy
    restart: no

  speech-api:
    build:
      context: .
      dockerfile: docker/Dockerfile.api
    image: speech-api:latest
    container_name: speech-api
    env_file:
      - .env
    command: ["uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8080"]
    ports:
      - "127.0.0.1:8080:8080"
    networks:
      - speech-network
    volumes:
      - transcribe:/srv/transcribe
    environment:
      - TRANSCRIBE_TMP_DIR=/srv/transcribe
    depends_on:
      migrate:
        condition: service_completed_successfully
      speech-redis:
        condition: service_started
    restart: unless-stopped

  speech-celery-worker:
    build:
      context: .
      # dockerfile: docker/Dockerfile.worker.cuda
      dockerfile: docker/Dockerfile.worker
    image: speech-celery-worker:latest
    container_name: speech-worker
    env_file:
      - .env
    networks:
      - speech-network
    volumes:
      - transcribe:/srv/transcribe
    environment:
      - TRANSCRIBE_TMP_DIR=/srv/transcribe
    depends_on:
      speech-postgres:
        condition: service_healthy
      speech-redis:
        condition: service_started
      migrate:
        condition: service_completed_successfully
    restart: unless-stopped
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           capabilities: ["gpu"]
    #           device_ids: ["0"]

networks:
  speech-network:
    name: speech-network

volumes:
  speech-postgres-data:
    name: speech-postgres-data
  speech-redis-data:
    name: speech-redis-data
  transcribe:
    name: speech-transcribe
